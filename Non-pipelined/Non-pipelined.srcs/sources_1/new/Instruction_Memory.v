`timescale 1ns / 1ps

module Instruction_Memory(
    input [63:0] Instr_Addr,
    output reg [31:0]Instruction
    );
    reg [7:0] memory[179:0];
    initial
    begin
// TESTING 
        memory[0] = 8'b10010011;
        memory[1] = 8'b10000100;
        memory[2] = 8'b10000100;
        memory[3] = 8'b00000000; // addi x9 x9 8
//        memory[4] = 8'b10010011;
//        memory[5] = 8'b10010100;
//        memory[6] = 8'b00100100;
//        memory[7] = 8'b00000000; // slli x9 x9 2
        memory[4] = 8'b01100011;
        memory[5] = 8'b11000100;
        memory[6] = 8'b10010000;
        memory[7] = 8'b00000000; // blt x1 x9 8
        memory[8] = 8'b10010011;
        memory[9] = 8'b10000100;
        memory[10] = 8'b00010100;
        memory[11] = 8'b00000000; 
        memory[12] = 8'b11100011;
        memory[13] = 8'b11001100;
        memory[14] = 8'b10010000;
        memory[15] = 8'b11111110; // blt x1 x9 -12
        memory[16] = 8'b10010011; 
        memory[17] = 8'b10000100;
        memory[18] = 8'b10000100;
        memory[19] = 8'b00000000; 
        memory[20] = 8'b10010011;
        memory[21] = 8'b10000100;
        memory[22] = 8'b10000100;
        memory[23] = 8'b00000000; 
        memory[24] = 8'b10010011;
        memory[25] = 8'b10000100;
        memory[26] = 8'b10000100;
        memory[27] = 8'b00000000;
        memory[28] = 8'b10010011;
        memory[29] = 8'b10000100;
        memory[30] = 8'b10000100;
        memory[31] = 8'b00000000;
        memory[32] = 8'b10010011;
        memory[33] = 8'b10000100;
        memory[34] = 8'b10000100;
        memory[35] = 8'b00000000;
        memory[36] = 8'b10010011;
        memory[37] = 8'b10000100;
        memory[38] = 8'b10000100;
        memory[39] = 8'b00000000;
        memory[40] = 8'b10010011;
        memory[41] = 8'b10000100;
        memory[42] = 8'b10000100;
        memory[43] = 8'b00000000;
        memory[44] = 8'b10010011;
        memory[45] = 8'b10000100;
        memory[46] = 8'b10000100;
        memory[47] = 8'b00000000;
        memory[48] = 8'b10010011;
        memory[49] = 8'b10000100;
        memory[50] = 8'b10000100;
        memory[51] = 8'b00000000;
        memory[52] = 8'b10010011;
        memory[53] = 8'b10000100;
        memory[54] = 8'b10000100;
        memory[55] = 8'b00000000;
        memory[56] = 8'b10010011;
        memory[57] = 8'b10000100;
        memory[58] = 8'b10000100;
        memory[59] = 8'b00000000;
        memory[60] = 8'b10010011;
        memory[61] = 8'b10000100;
        memory[62] = 8'b10000100;
        memory[63] = 8'b00000000;
        memory[64] = 8'b10010011;
        memory[65] = 8'b10000100;
        memory[66] = 8'b10000100;
        memory[67] = 8'b00000000;
        memory[68] = 8'b10010011;
        memory[69] = 8'b10000100;
        memory[70] = 8'b10000100;
        memory[71] = 8'b00000000;
        memory[72] = 8'b10010011;
        memory[73] = 8'b10000100;
        memory[74] = 8'b10000100;
        memory[75] = 8'b00000000;
        memory[76] = 8'b10010011;
        memory[77] = 8'b10000100;
        memory[78] = 8'b10000100;
        memory[79] = 8'b00000000;
        memory[80] = 8'b10010011;
        memory[81] = 8'b10000100;
        memory[82] = 8'b10000100;
        memory[83] = 8'b00000000;
        memory[84] = 8'b10010011;
        memory[85] = 8'b10000100;
        memory[86] = 8'b10000100;
        memory[87] = 8'b00000000;
        memory[88] = 8'b10010011;
        memory[89] = 8'b10000100;
        memory[90] = 8'b10000100;
        memory[91] = 8'b00000000;
        memory[92] = 8'b10010011;
        memory[93] = 8'b10000100;
        memory[94] = 8'b10000100;
        memory[95] = 8'b00000000;
        memory[96] = 8'b10010011;
        memory[97] = 8'b10000100;
        memory[98] = 8'b10000100;
        memory[99] = 8'b00000000;
        memory[100] = 8'b10010011;
        memory[101] = 8'b10000100;
        memory[102] = 8'b10000100;
        memory[103] = 8'b00000000;
        memory[104] = 8'b10010011;
        memory[105] = 8'b10000100;
        memory[106] = 8'b10000100;
        memory[107] = 8'b00000000;
        memory[108] = 8'b10010011;
        memory[109] = 8'b10000100;
        memory[110] = 8'b10000100;
        memory[111] = 8'b00000000;
        memory[112] = 8'b10010011;
        memory[113] = 8'b10000100;
        memory[114] = 8'b10000100;
        memory[115] = 8'b00000000;
        memory[116] = 8'b10010011;
        memory[117] = 8'b10000100;
        memory[118] = 8'b10000100;
        memory[119] = 8'b00000000;
        memory[120] = 8'b10010011;
        memory[121] = 8'b10000100;
        memory[122] = 8'b10000100;
        memory[123] = 8'b00000000;
        memory[124] = 8'b10010011;
        memory[125] = 8'b10000100;
        memory[126] = 8'b10000100;
        memory[127] = 8'b00000000;
        memory[128] = 8'b10010011;
        memory[129] = 8'b10000100;
        memory[130] = 8'b10000100;
        memory[131] = 8'b00000000;
        memory[132] = 8'b10010011;
        memory[133] = 8'b10000100;
        memory[134] = 8'b10000100;
        memory[135] = 8'b00000000;
        memory[136] = 8'b10010011;
        memory[137] = 8'b10000100;
        memory[138] = 8'b10000100;
        memory[139] = 8'b00000000;
        memory[140] = 8'b10010011;
        memory[141] = 8'b10000100;
        memory[142] = 8'b10000100;
        memory[143] = 8'b00000000;
        memory[144] = 8'b10010011;
        memory[145] = 8'b10000100;
        memory[146] = 8'b10000100;
        memory[147] = 8'b00000000;
        memory[148] = 8'b10010011;
        memory[149] = 8'b10000100;
        memory[150] = 8'b10000100;
        memory[151] = 8'b00000000; 
        memory[152] = 8'b10010011;
        memory[153] = 8'b10000100;
        memory[154] = 8'b10000100;
        memory[155] = 8'b00000000;
        memory[156] = 8'b10010011;
        memory[157] = 8'b10000100;
        memory[158] = 8'b10000100;
        memory[159] = 8'b00000000;
        memory[160] = 8'b10010011;
        memory[161] = 8'b10000100;
        memory[162] = 8'b10000100;
        memory[163] = 8'b00000000;
        memory[164] = 8'b10010011;
        memory[165] = 8'b10000100;
        memory[166] = 8'b10000100;
        memory[167] = 8'b00000000;
        memory[168] = 8'b10010011;
        memory[169] = 8'b10000100;
        memory[170] = 8'b10000100;
        memory[171] = 8'b00000000;
        memory[172] = 8'b10010011;
        memory[173] = 8'b10000100;
        memory[174] = 8'b10000100;
        memory[175] = 8'b00000000;
        memory[176] = 8'b10010011;
        memory[177] = 8'b10000100;
        memory[178] = 8'b10000100;
        memory[179] = 8'b00000000;
    end
    
    always @*
    begin
        Instruction[31:24] = memory[Instr_Addr+3];
        Instruction[23:16] = memory[Instr_Addr+2];
        Instruction[15:8] = memory[Instr_Addr+1];
        Instruction[7:0] = memory[Instr_Addr];
    end
    
    
endmodule